// Code generated by protoc-gen-go. DO NOT EDIT.
// source: okashi/okashi.proto

package okashi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetOkashiMessage struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LikeFreq             int32    `protobuf:"varint,2,opt,name=like_freq,json=likeFreq,proto3" json:"like_freq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOkashiMessage) Reset()         { *m = GetOkashiMessage{} }
func (m *GetOkashiMessage) String() string { return proto.CompactTextString(m) }
func (*GetOkashiMessage) ProtoMessage()    {}
func (*GetOkashiMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_okashi_5e97b19d7810b896, []int{0}
}
func (m *GetOkashiMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOkashiMessage.Unmarshal(m, b)
}
func (m *GetOkashiMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOkashiMessage.Marshal(b, m, deterministic)
}
func (dst *GetOkashiMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOkashiMessage.Merge(dst, src)
}
func (m *GetOkashiMessage) XXX_Size() int {
	return xxx_messageInfo_GetOkashiMessage.Size(m)
}
func (m *GetOkashiMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOkashiMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GetOkashiMessage proto.InternalMessageInfo

func (m *GetOkashiMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetOkashiMessage) GetLikeFreq() int32 {
	if m != nil {
		return m.LikeFreq
	}
	return 0
}

type OkashiResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Eval                 int32    `protobuf:"varint,2,opt,name=eval,proto3" json:"eval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OkashiResponse) Reset()         { *m = OkashiResponse{} }
func (m *OkashiResponse) String() string { return proto.CompactTextString(m) }
func (*OkashiResponse) ProtoMessage()    {}
func (*OkashiResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_okashi_5e97b19d7810b896, []int{1}
}
func (m *OkashiResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OkashiResponse.Unmarshal(m, b)
}
func (m *OkashiResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OkashiResponse.Marshal(b, m, deterministic)
}
func (dst *OkashiResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OkashiResponse.Merge(dst, src)
}
func (m *OkashiResponse) XXX_Size() int {
	return xxx_messageInfo_OkashiResponse.Size(m)
}
func (m *OkashiResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OkashiResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OkashiResponse proto.InternalMessageInfo

func (m *OkashiResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OkashiResponse) GetEval() int32 {
	if m != nil {
		return m.Eval
	}
	return 0
}

func init() {
	proto.RegisterType((*GetOkashiMessage)(nil), "GetOkashiMessage")
	proto.RegisterType((*OkashiResponse)(nil), "OkashiResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OkashiServiceClient is the client API for OkashiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OkashiServiceClient interface {
	GetFavoriteOkashi(ctx context.Context, in *GetOkashiMessage, opts ...grpc.CallOption) (*OkashiResponse, error)
}

type okashiServiceClient struct {
	cc *grpc.ClientConn
}

func NewOkashiServiceClient(cc *grpc.ClientConn) OkashiServiceClient {
	return &okashiServiceClient{cc}
}

func (c *okashiServiceClient) GetFavoriteOkashi(ctx context.Context, in *GetOkashiMessage, opts ...grpc.CallOption) (*OkashiResponse, error) {
	out := new(OkashiResponse)
	err := c.cc.Invoke(ctx, "/OkashiService/GetFavoriteOkashi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OkashiServiceServer is the server API for OkashiService service.
type OkashiServiceServer interface {
	GetFavoriteOkashi(context.Context, *GetOkashiMessage) (*OkashiResponse, error)
}

func RegisterOkashiServiceServer(s *grpc.Server, srv OkashiServiceServer) {
	s.RegisterService(&_OkashiService_serviceDesc, srv)
}

func _OkashiService_GetFavoriteOkashi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOkashiMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OkashiServiceServer).GetFavoriteOkashi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OkashiService/GetFavoriteOkashi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OkashiServiceServer).GetFavoriteOkashi(ctx, req.(*GetOkashiMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _OkashiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "OkashiService",
	HandlerType: (*OkashiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFavoriteOkashi",
			Handler:    _OkashiService_GetFavoriteOkashi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "okashi/okashi.proto",
}

func init() { proto.RegisterFile("okashi/okashi.proto", fileDescriptor_okashi_5e97b19d7810b896) }

var fileDescriptor_okashi_5e97b19d7810b896 = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xce, 0xcf, 0x4e, 0x2c,
	0xce, 0xc8, 0xd4, 0x87, 0x50, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x4a, 0xce, 0x5c, 0x02, 0xee,
	0xa9, 0x25, 0xfe, 0x60, 0x21, 0xdf, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0x21, 0x21, 0x2e, 0x96,
	0xbc, 0xc4, 0xdc, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0x48, 0x9a, 0x8b,
	0x33, 0x27, 0x33, 0x3b, 0x35, 0x3e, 0xad, 0x28, 0xb5, 0x50, 0x82, 0x49, 0x81, 0x51, 0x83, 0x35,
	0x88, 0x03, 0x24, 0xe0, 0x56, 0x94, 0x5a, 0xa8, 0x64, 0xc1, 0xc5, 0x07, 0x31, 0x21, 0x28, 0xb5,
	0xb8, 0x20, 0x3f, 0xaf, 0x18, 0xbb, 0x11, 0x42, 0x5c, 0x2c, 0xa9, 0x65, 0x89, 0x39, 0x50, 0xdd,
	0x60, 0xb6, 0x91, 0x17, 0x17, 0x2f, 0x44, 0x67, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x90,
	0x25, 0x97, 0xa0, 0x7b, 0x6a, 0x89, 0x5b, 0x62, 0x59, 0x7e, 0x51, 0x66, 0x49, 0x2a, 0x44, 0x4e,
	0x48, 0x50, 0x0f, 0xdd, 0x8d, 0x52, 0xfc, 0x7a, 0xa8, 0x36, 0x2a, 0x31, 0x24, 0xb1, 0x81, 0x7d,
	0x64, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xde, 0x00, 0xed, 0xd0, 0xe8, 0x00, 0x00, 0x00,
}
